function gd(year, month, day) {
      return new Date(year, month - 1, day).getTime();
}

function getDateStr(interval){
  var date = new Date();
  var ts = date - 3600 * 1000 * 24 * parseInt(interval);
  date.setTime(ts);
  var year = date.getFullYear();
  var month = date.getMonth() + 1;
  var day = date.getDate();
  if (month.toString().length < 2) { month = '0' + month };
  if (day.toString().length < 2) { day = '0' + day };
  return year + '-' + month + '-' + day
}


function drawSampleTender(data, element){
  var date = getDateStr(0);
  var number_list = new Array();
  for (var i=0; i<24; i++){
    number_list.push(data.data[date][i])
  };

  $(element).sparkline(number_list, {
          type: 'line',
          height: '40',
          width: '200',
          lineColor: '#26B99A',
          fillColor: '#ffffff',
          lineWidth: 3,
          spotColor: '#34495E',
          minSpotColor: '#34495E'
        });
};

function drawSparkLineSpider(data){
  Morris.Bar({
          element: 'spider_crawl',
          data: data,
          xkey: 'spider_id',
          hideHover: 'auto',
          // barColors: ['#26B99A', '#34495E', '#ACADAC', '#3498DB'],
          barColors: ['#26B99A'],
          ykeys: ['num'],
          labels: ['num'],
          xLabelAngle: 60,
          resize: true
        });
};

function drawLineChart(total_count){
    var data1 = new Array();
    for(date in total_count){
        d = date.split("-");
      // alert(date);
        data1.push([gd(parseInt(d[0]), parseInt(d[1]), parseInt(d[2])),total_count[date]]);
    };

    $("#canvas_dahs").length && $.plot($("#canvas_dahs"), [
      data1
    ], {
      series: {
        lines: {
          show: true,
          fill: true
        },
        splines: {
          show: false,
          tension: 0.4,
          lineWidth: 1,
          fill: 0.4
        },
        points: {
          radius: 3,
          show: true
        },
        shadowSize: 2
      },
      grid: {
        verticalLines: true,
        hoverable: true,
        clickable: true,
        tickColor: "#d5d5d5",
        borderWidth: 1,
        color: '#fff'
      },
      colors: ["rgba(38, 185, 154, 0.38)", "rgba(3, 88, 106, 0.38)"],
      xaxis: {
        tickColor: "rgba(51, 51, 51, 0.06)",
        mode: "time",
        tickSize: [1, "day"],
        // tickLength: 10,
        axisLabel: "Date",
        axisLabelUseCanvas: true,
        axisLabelFontSizePixels: 12,
        axisLabelFontFamily: 'Verdana, Arial',
        axisLabelPadding: 10
      },
      yaxis: {
        ticks: 8,
        tickColor: "rgba(51, 51, 51, 0.06)",
      },
      tooltip: false
    });

    
}


function drawDoghnutChart(canvas,json){
    list = json.update_count;
    var options = {
          legend: false,
          responsive: false
        };

        new Chart(document.getElementById('canvas'), {
          type: 'doughnut',
          tooltipFillColor: "rgba(51, 51, 51, 0.55)",
          data: {
            labels: [
              "Symbian",
              "Blackberry",
              "Other",
              "Android",
              "IOS"
            ],
            datasets: [{
              data: list,
              backgroundColor: [
                "#3498DB",
                "#26B99A",
                "#9B59B6",
                "#BDC3C7",
                "#E74C3C",
                
              ],
              hoverBackgroundColor: [
                "#49A9EA",
                "#36CAAB",
                "#B370CF",
                "#CFD4D8",
                "#E95E4F",
                
              ]
            }]
          },
          options: options
        });
}

function drawRedisChart(){
    var opts = {
          lines: 12,
          angle: 0,
          lineWidth: 0.4,
          pointer: {
              length: 0.75,
              strokeWidth: 0.042,
              color: '#1D212A'
          },
          limitMax: 'false',
          colorStart: '#1ABC9C',
          colorStop: '#1ABC9C',
          strokeColor: '#F0F3F3',
          generateGradient: true
      };
      var target = document.getElementById('foo'),
          gauge = new Gauge(target).setOptions(opts);

      gauge.maxValue = 6000;
      gauge.animationSpeed = 32;
      gauge.set(3200);
      gauge.setTextField(document.getElementById("gauge-text"));
}



function dashboardViewModel() {

  var hot_60d, hot_60d_log, hot_60d_last_time,
      hot_zombie, hot_zombie_log, hot_zombie_last_time,
      active_10d, active_10d_log, active_10d_last_time,
      active_60d, active_60d_log, active_60d_last_time,
      active_zombie, active_zombie_log, active_zombie_last_time;

  var total_count = new Object(); // 总数列表

    $.ajax({
        url:"http://192.168.132.93:8000/lists?format=json",
        async: false,
        dataType:'json',
        success: function(jsonData){
            hot_60d = jsonData.l_uids_hot_60d.size;
            hot_60d_last_time = jsonData.l_uids_hot_60d.last_date
            hot_60d_log = jsonData.l_uids_hot_60d.interval.slice(0, 10).join(',')

            hot_zombie = jsonData.l_uids_hot_zombie.size;
            hot_zombie_last_time = jsonData.l_uids_hot_zombie.last_date
            hot_zombie_log = jsonData.l_uids_hot_zombie.interval.slice(0, 10).join(',')

            active_10d = jsonData.l_uids_10d.size;
            active_10d_last_time = jsonData.l_uids_10d.last_date
            active_10d_log = jsonData.l_uids_10d.interval.slice(0, 10).join(',')

            active_60d = jsonData.l_uids_60d.size;
            active_60d_last_time = jsonData.l_uids_60d.last_date
            active_60d_log = jsonData.l_uids_60d.interval.slice(0, 10).join(',')

            active_zombie = jsonData.list_weibo_uids_zombie.size;
            active_zombie_last_time = jsonData.list_weibo_uids_zombie.last_date
            active_zombie_log = jsonData.list_weibo_uids_zombie.interval.slice(0, 10).join(',')

            real_zombie = jsonData.list_weibo_uids_real_zombie.size;
            real_zombie_last_time = jsonData.list_weibo_uids_real_zombie.last_date
            if (jsonData.list_weibo_uids_real_zombie.interval.length > 0){
                real_zombie_log = jsonData.list_weibo_uids_real_zombie.interval.slice(0, 10).join(',')        
            } else {
                real_zombie_log = ''
            }

        }
    })

    this.hot_60d = hot_60d;
    this.hot_60d_log = hot_60d_log;
    this.hot_60d_last_time = hot_60d_last_time;

    this.hot_zombie = hot_zombie;
    this.hot_zombie_log = hot_zombie_log;
    this.hot_zombie_last_time = hot_zombie_last_time;

    this.active_10d = active_10d;
    this.active_10d_log = active_10d_log;
    this.active_10d_last_time = active_10d_last_time;

    this.active_60d = active_60d;
    this.active_60d_log = active_60d_log;
    this.active_60d_last_time = active_60d_last_time;

    this.active_zombie = active_zombie;
    this.active_zombie_log = active_zombie_log;
    this.active_zombie_last_time = active_zombie_last_time;

    this.real_zombie = real_zombie;
    this.real_zombie_log = real_zombie_log;
    this.real_zombie_last_time = real_zombie_last_time;

    this.total_user = hot_60d + hot_zombie + active_10d + active_60d + active_zombie + real_zombie;

    $.ajax({
        url:"http://192.168.132.93:8000/daily?format=json",
        async: false,
        dataType:'json',
        success: function(jsonData){
            for (var i = 0; i < 60; i++) {
                var item = jsonData[i];
          if (item.num != null){
            total_count[item.date] = parseInt(item.num.replace(",","").replace(",",""))
          };
            };
            drawLineChart(total_count);
        }
    });

    var expects = new Array();
    var percentages = new Object();

    $.ajax({
        url:"http://192.168.132.93:8000/log?format=json&type=update&days=5",
        async: false,
        dataType:'json',
        success: function(jsonData){
            // drawDoghnutChart('canvas1',jsonData[0]);
            // drawDoghnutChart('canvas2',jsonData[1]);

        var data = jsonData.data;
        for (date in data){
          var total = total_count[date];
          percentage = parseInt( total / data[date].total * 100);
          expects.push({
            "date": date,
            "style": "width: " + percentage + '%',
            "real": parseInt(total/1000)+"k",
            "expect": parseInt(data[date].total/1000) + "k ( "+percentage+"% )",

          })
        }

        var todayStr = getDateStr(0);
        var yestodayStr = getDateStr(1);
        var today_data = jsonData.data[todayStr];
        for (key in today_data){
          if (key != 'total'){
            var per = parseInt(today_data[key] / 1000) + 'k ( '
            per += parseInt(today_data[key] / today_data['total'] * 100) + '% )';
            today_data[key] = per
          }
        };
        percentages.today = today_data;

        var yestoday_data = jsonData.data[yestodayStr];
        for (key in yestoday_data){
          if (key != 'total'){
            var per = parseInt(yestoday_data[key] / 1000) + 'k ( '
            per += parseInt(yestoday_data[key] / yestoday_data['total'] * 100) + '% )';
            yestoday_data[key] = per
          }
        }
        percentages.yestoday = yestoday_data;
        }
    });

 //    $.ajax({
    //  url:"http://192.168.132.93:8000/redis?format=json",
    //  async: false,
    //  dataType:'json',
    //  success: function(jsonData){
    //      drawRedisChart(jsonData.used_memory,jsonData.total_system_memory);
    //  }
    // });
    
    this.percentages = percentages;
    this.expects = expects;

  $.ajax({
      url:"http://192.168.132.93:8000/spider?type=direct&format=json",
      async: false,
      dataType:'json',
      success: function(jsonData){
          drawSparkLineSpider(jsonData);
       }
    });

  $.ajax({
      url:"http://192.168.132.93:8000/log?type=special_push&days=1",
      async: false,
      dataType:'json',
      success: function(jsonData){
          drawSampleTender(jsonData, ".TodaySpecialPushTenderChart");
       }
    });

  $.ajax({
      url:"http://192.168.132.93:8000/log?type=valide&days=1",
      async: false,
      dataType:'json',
      success: function(jsonData){
          drawSampleTender(jsonData, ".TodayCrawlTenderChart");
       }
    });


    
}

$(document).ready(function() {
    ko.applyBindings(new dashboardViewModel());
});




//

